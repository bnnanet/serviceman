#!/bin/sh
#shellcheck disable=SC1090
set -e
set -u

g_year='2024'
g_version='v0.9.5'
g_date='2024-12-23T00:25:00-07:00'
g_license='MPL-2.0'

g_scriptdir="$(dirname "${0}")"
cmd_sudo=""
if command -v sudo > /dev/null; then
    cmd_sudo='sudo'
fi

if test -f ~/.config/serviceman/config.env; then
    echo "Loading ~/.config/serviceman/config.env..." >&2
    . ~/.config/serviceman/config.env
fi

fn_version() { (
    echo "serviceman ${g_version} (${g_date})"
    echo "Copyright ${g_year} AJ ONeal"
    echo "Licensed under the ${g_license}"
); }

fn_help() { (
    fn_version
    echo ""
    echo "USAGE"
    echo "    serviceman <subcommand> --help"
    echo ""
    echo "EXAMPLES"
    echo "    serviceman add --name 'foo-app' -- ./foo-app --bar"
    echo "    serviceman list --all"
    echo "    serviceman logs 'foo-app'"
    echo ""
    echo "    serviceman disable 'foo-app'"
    echo "    serviceman enable 'foo-app'"
    echo "    serviceman start 'foo-app'"
    echo "    serviceman stop 'foo-app'"
    echo "    serviceman restart 'foo-app'"
    echo ""
    echo "    serviceman help"
    echo "    serviceman version"
    echo ""
    echo "GLOBAL FLAGS"
    echo "    --help can be used with any subcommand"
    echo "    --daemon (Linux, BSD default)  act as system boot service (sudo)"
    echo "    --agent (macOS default)  act as user login service"

    if command -v systemctl > /dev/null; then
        fn_systemd_help SERVICE_NAME "m"
        return
    fi

    if command -v launchctl > /dev/null; then
        fn_launchctl_help SERVICE_NAME "y"
        return
    fi

    if command -v rc-update > /dev/null; then
        fn_openrc_help SERVICE_NAME
        return
    fi

    echo >&2 'warn: could not detect systemd, openrc, or launchctl'
); }

fn_add_help() { (
    echo ""
    echo "USAGE"
    echo "    serviceman add [add-opts] -- <command> [command-opts]"
    echo ""
    echo "FLAGS"
    echo '    --no-cap-net-bind (Linux only)  do not set cap net bind for privileged ports'
    echo "    --dryrun  output service file without modifying disk"
    echo "    --force  install even if command or directory does not exist"
    echo "    --daemon (Linux, BSD default)  sudo, install system boot service"
    echo "      --ignore-logind-ipc (systemd only)  do not set logind.conf RemoveIPC=no"
    echo "    --agent (macOS default)  no sudo, install user login service"
    echo "    --  stop reading flags (to prevent conflict with command)"
    echo ""
    echo "OPTIONS"
    echo '    --name <name>  the service name, defaults to binary, or otherwise workdir name'
    echo '    --desc <description>  a brief description of the service'
    echo "    --group <groupname>  defaults to '$(id -g -n)'"
    echo "    --path <PATH>  defaults to current \$PATH value (set to '' to disable)"
    echo "    --rdns <reverse-domain> (macOS only)  set launchctl rdns name"
    echo '    --title <title>  the service name, stylized'
    echo '    --url <link-to-docs>  link to documentation or homepage'
    echo "    --user <username>  defaults to '$(id -u -n)'"
    echo '    --workdir <dirpath>  where the command runs, defaults to current directory'
    echo ""
    echo "EXAMPLES"
    echo "    caddy:   serviceman add -- caddy run --envfile ./.env --config ./Caddyfile --adapter caddyfile"
    echo "    node:    serviceman add --workdir . --name 'api' -- node ./server.js"
    echo "    pg:      serviceman add --workdir ~/.local/share/postgres/var -- postgres -D ~/.local/share/postgres/var -p 5432"
    echo "    python:  serviceman add --name 'thing' -- python3 ./thing.py"
    echo "    shell:   serviceman add --name 'foo' -- ./foo.sh --bar ./baz"
    echo ""
); }

fn_list_help() { (
    echo ""
    echo "USAGE"
    echo "    serviceman list [--all]"
    echo ""
    echo "FLAGS"
    echo '    --all  show all services, not just those generated by serviceman'
    echo "    --daemon (Linux, BSD default)  list system boot services"
    echo "    --agent (macOS default)  list user login services"
    echo ""
); }

fn_state_help() { (
    echo ""
    echo "USAGE"
    echo "    serviceman ${1} [flags]"
    echo ""
    echo "FLAGS"
    echo "    --daemon (Linux, BSD default)  act as system boot service (sudo)"
    echo "    --agent (macOS default)  act as user login service"
    echo ""
); }

cmd_add() { (
    b_exec=''

    b_name=''
    b_rdns=''
    b_title=''
    b_desc=''
    b_url=''
    b_workdir=''
    b_path="${PATH}"

    b_user=''
    b_group=''

    b_cap_net_bind=''
    b_dryrun=''
    b_force=''

    b_boot_daemon_set=''
    b_boot_daemon=''
    b_login_agent_set=''
    b_login_agent=''
    if test "$(uname -s)" = 'Darwin'; then
        b_login_agent='y'
    else
        b_boot_daemon='y'
    fi
    b_ignore_logind_ipc=''

    while test "${#}" -ge 1; do
        b_arg="${1:-}"
        shift

        b_has_arg=''
        b_opt_arg=''
        case "${b_arg}" in
            -*=)
                b_has_arg='y'
                b_arg="$(printf '%s' "${b_arg}" | cut -d= -f1)"
                ;;
            -*=*)
                b_has_arg='y'
                b_opt_arg="$(printf '%s' "${b_arg}" | cut -d= -f2-)"
                b_arg="$(printf '%s' "${b_arg}" | cut -d= -f1)"
                ;;
        esac

        case "${b_arg}" in
            --)
                break
                ;;
            help | --help)
                fn_add_help
                return 0
                ;;
            --no-cap-net-bind)
                b_cap_net_bind='n'
                ;;
            --dryrun)
                b_dryrun='y'
                ;;
            --force)
                b_force='y'
                ;;
            --daemon)
                b_boot_daemon_set='y'
                if test -n "${b_login_agent_set}"; then
                    echo >&2 "error: --daemon and --agent are mutually exclusive"
                    return 1
                fi
                b_boot_daemon='y'
                b_login_agent=''
                ;;
            --ignore-logind-ipc)
                # not in alphabetical order because this directly and only
                # relates to --daemon
                if ! command -v systemctl > /dev/null; then
                    echo >&2 "warn: '--ignore-logind-ipc' only applies to systemd service units"
                else
                    b_ignore_logind_ipc='y'
                fi
                ;;
            --agent)
                b_login_agent_set='y'
                if test -n "${b_boot_daemon_set}"; then
                    echo >&2 "error: --daemon and --agent are mutually exclusive"
                    return 1
                fi
                b_boot_daemon=''
                b_login_agent='y'
                ;;
            --name)
                if test -n "${b_has_arg}"; then
                    b_name="${b_opt_arg}"
                else
                    b_name="${1:-}"
                    shift
                fi
                ;;
            --desc)
                if test -n "${b_has_arg}"; then
                    b_desc="${b_opt_arg}"
                else
                    b_desc="${1:-}"
                    shift
                fi
                ;;
            --group)
                if test -n "${b_has_arg}"; then
                    b_group="${b_opt_arg}"
                else
                    b_group="${1:-}"
                    shift
                fi
                ;;
            --path)
                if test -n "${b_has_arg}"; then
                    b_path="${b_opt_arg}"
                else
                    b_path="${1:-}"
                    shift
                fi
                ;;
            --rdns)
                if ! command -v launchctl > /dev/null; then
                    echo >&2 "error: --rdns is only valid for launchctl (macOS)"
                    return 1
                fi
                if test -n "${b_has_arg}"; then
                    b_rdns="${b_opt_arg}"
                else
                    b_rdns="${1:-}"
                    shift
                fi
                ;;
            --title)
                if test -n "${b_has_arg}"; then
                    b_title="${b_opt_arg}"
                else
                    b_title="${1:-}"
                    shift
                fi
                ;;
            --url)
                if test -n "${b_has_arg}"; then
                    b_url="${b_opt_arg}"
                else
                    b_url="${1:-}"
                    shift
                fi
                ;;
            --user)
                if test -n "${b_has_arg}"; then
                    b_user="${b_opt_arg}"
                else
                    b_user="${1:-}"
                    shift
                fi
                ;;
            --workdir)
                if test -n "${b_has_arg}"; then
                    b_workdir="$(realpath "${b_opt_arg}")"
                else
                    b_workdir="$(realpath "${1:-}")"
                    shift
                fi
                ;;
            --*)
                {
                    echo "error: unrecognized option '${b_arg}'"
                    fn_add_help
                } >&2
                return 1
                ;;
            *)
                b_exec="${b_arg}"
                break
                ;;
        esac
    done

    if test -z "${b_exec}"; then
        if test -z "${1:-}"; then
            echo 'error: you must give at least the command to run' >&2
            return 1
        fi
        b_exec="${1}"
        shift
    fi

    if test -z "${b_url}"; then
        b_url="(none)"
    fi

    if test -z "${b_workdir}"; then
        b_workdir="$(pwd)"
    fi
    # if test -z "${b_path}"; then
    #     b_path="${PATH}"
    # fi
    if test "$(uname -s)" = 'Darwin' && test -n "${b_boot_daemon}"; then
        if test -z "${b_user}"; then
            b_user="root"
        fi
        if test -z "${b_group}"; then
            b_group="wheel"
        fi
    else
        if test -z "${b_user}"; then
            b_user="$(id -u -n)"
        fi
        if test -z "${b_group}"; then
            b_group="$(id -g -n)"
        fi
    fi

    if test -n "${b_login_agent}"; then
        if test "${b_user}" != "$(id -u -n)"; then
            echo >&2 "error: login services for '$(id -u -n)' cannot be set to '${b_user}'"
            return 1
        fi
        if test "${b_group}" != "$(id -g -n)"; then
            if test -z "${b_force}"; then
                echo >&2 "error: '$(id -g -n)' may not be a valid group (use --force to ignore)"
                return 1
            fi
            echo >&2 "warn: '$(id -g -n)' may not be a valid group"
        fi
    fi

    b_interpreter=''
    b_cmdpath="$(command -v "${b_exec}" || true)"
    # we probably don't need the realpath, the path in the PATH is good enough
    #b_cmdpath="$(realpath "${b_cmdpath}" 2> /dev/null || true)"
    if test -z "${b_cmdpath}"; then
        if test -z "${b_force}"; then
            echo >&2 "error: '${b_exec}' not found (use --force to ignore)"
            return 1
        fi
        b_cmdpath="${b_exec}"
    else
        b_interp="$(fn_read_shebang "${b_cmdpath}")"
        if test -n "${b_interp}"; then
            b_interpreter="$(command -v "${b_interp}" || true)"
            # it's important to NOT resolve /bin/sh to /bin/busybox
            #b_interpreter="$(realpath "${b_interpreter}" 2> /dev/null || true)"
            if test -z "${b_interpreter}"; then
                if test -z "${b_force}"; then
                    echo >&2 "error: '${b_interp}' not found (use --force to ignore)"
                    return 1
                fi
                b_interpreter="${b_interp}"
            fi
        fi
    fi

    if test -z "${b_name}"; then
        if test -n "${b_interpreter}"; then
            # ex: use the workdir name for node or python
            b_name="$(basename "${b_workdir}")"
        else
            # ex: use the bin name for caddy or postgres
            b_name="${b_exec}"
        fi
    fi
    if test -z "${b_rdns}"; then
        b_rdns="${b_name}"
    fi
    if test -z "${b_title}"; then
        b_title="${b_name}"
    fi
    if test -z "${b_desc}"; then
        b_desc="${b_title} daemon"
    fi

    if test "${#}" -gt 0; then
        for b_arg in "${@}"; do
            if echo "${b_arg}" | grep -q -E '^\/'; then
                if test -e "${b_arg}"; then
                    continue
                fi

                if test -z "${b_force}"; then
                    echo "error: file or dir does not exist: '${b_arg}' (use --force to ignore)" >&2
                    return 1
                fi
                echo "warn: file or dir does not exist: '${b_arg}'" >&2
            elif echo "${b_arg}" | grep -q -E '^(\.\/|\.\.\/)'; then
                if test -e "${b_workdir}/${b_arg}"; then
                    continue
                fi

                if test -z "${b_force}"; then
                    echo "error: file or dir does not exist: '${b_arg}' (use --force to ignore)" >&2
                    return 1
                fi
                echo "warn: file or dir does not exist: '${b_arg}'" >&2
            elif test -e "${b_arg}" || test -e "${b_workdir}/${b_arg}"; then
                if test -z "${b_force}"; then
                    echo "error: use ./ prefix for file or dir '${b_arg}' (use --force to ignore)" >&2
                    return 1
                fi
                echo "warn: use ./ prefix for file or dir '${b_arg}'" >&2
            fi
        done
    fi

    b_posix_args=''
    if test "${#}" -gt "0"; then
        b_posix_args="$(fn_args_build_posix "${b_interpreter}" "${b_cmdpath}" "${@}")"
    else
        b_posix_args="$(fn_args_build_posix "${b_interpreter}" "${b_cmdpath}")"
    fi

    fn_print_args \
        "${b_login_agent}" \
        "${b_posix_args}" \
        "${b_name}" \
        "${b_rdns}" \
        "${b_title}" \
        "${b_desc}" \
        "${b_url}" \
        "${b_user}" \
        "${b_group}" \
        "${b_workdir}" \
        "${b_path}" \
        "${b_cap_net_bind}" \
        "${b_dryrun}" \
        "${b_ignore_logind_ipc}" >&2
    echo "" >&2
    sleep 0.5

    if command -v systemctl > /dev/null; then
        fn_systemd_logind_set_ipc \
            "${b_boot_daemon}" \
            "${b_user}" \
            "${b_ignore_logind_ipc}"
        echo "" >&2

        b_systemd_args=''
        if test "${#}" -gt "0"; then
            b_systemd_args="$(fn_args_build_systemd "${b_interpreter}" "${b_cmdpath}" "${@}")"
        else
            b_systemd_args="$(fn_args_build_systemd "${b_interpreter}" "${b_cmdpath}")"
        fi
        fn_systemd_add \
            "${b_login_agent}" \
            "${b_systemd_args}" \
            "${b_name}" \
            "${b_title}" \
            "${b_desc}" \
            "${b_url}" \
            "${b_user}" \
            "${b_group}" \
            "${b_workdir}" \
            "${b_path}" \
            "${b_cap_net_bind}" \
            "${b_dryrun}"
        return
    fi

    if command -v launchctl > /dev/null; then
        b_plist_args=''
        if test "${#}" -gt "0"; then
            b_plist_args="$(fn_args_build_plist "${b_interpreter}" "${b_cmdpath}" "${@}")"
        else
            b_plist_args="$(fn_args_build_plist "${b_interpreter}" "${b_cmdpath}")"
        fi

        fn_launchctl_add \
            "${b_login_agent}" \
            "${b_plist_args}" \
            "${b_name}" \
            "${b_rdns}" \
            "${b_title}" \
            "${b_desc}" \
            "${b_url}" \
            "${b_user}" \
            "${b_group}" \
            "${b_workdir}" \
            "${b_path}" \
            "${b_cap_net_bind}" \
            "${b_dryrun}"
        return
    fi

    if command -v rc-update > /dev/null; then
        fn_openrc_add \
            "${b_login_agent}" \
            "${b_posix_args}" \
            "${b_name}" \
            "${b_title}" \
            "${b_desc}" \
            "${b_url}" \
            "${b_user}" \
            "${b_group}" \
            "${b_workdir}" \
            "${b_path}" \
            "${b_cap_net_bind}" \
            "${b_dryrun}"
        return
    fi

    echo >&2 'error: could not detect systemd, openrc, or launchctl'
    return 1
); }

#shellcheck disable=SC1003,SC2016
fn_print_args() { (
    a_login_agent="${1}"
    a_posix_args="${2}"
    a_name="${3}"
    a_rdns="${4}"
    a_title="${5}"
    a_desc="${6}"
    a_url="${7}"
    a_user="${8}"
    a_group="${9}"
    a_workdir="${10}"
    a_path="${11}"
    a_cap_net_bind="${12}"
    a_dryrun="${13}"
    a_ignore_logind_ipc="${14}"

    echo ""
    echo "Running 'serviceman' with the following options:"
    echo "(may include ENVs from ~/.config/serviceman/config.env)"
    echo ""
    echo "PATH=${a_path}"
    echo ""
    echo "SERVICEMAN_IGNORE_LOGIND_IPC=${SERVICEMAN_IGNORE_LOGIND_IPC:-}"
    echo ""
    echo '    serviceman add \'
    echo "        --name '${a_name}' \\"
    if test "$(uname -s)" = 'Darwin'; then
        echo "        --rdns '${a_rdns}' \\"
    fi
    echo "        --url '${a_url}' \\"
    echo "        --title '${a_title}' \\"
    echo "        --desc '${a_desc}' \\"
    echo "        --user '${a_user}' \\"
    echo "        --group '${a_group}' \\"
    echo '        --path "$PATH" # SEE ABOVE \'
    echo "        --workdir '${a_workdir}' \\"
    if test "${a_cap_net_bind}" = 'n'; then
        echo '        --no-cap-net-bind \'
    fi
    if test -n "${a_login_agent}"; then
        echo '        --agent \'
    else
        if test -n "${a_ignore_logind_ipc}" || test -n "${SERVICEMAN_IGNORE_LOGIND_IPC:-}"; then
            echo '        --daemon --ignore-logind-ipc \'
        else
            echo '        --daemon \'
        fi
    fi
    if test -n "${a_dryrun}"; then
        echo '        --dryrun \'
    fi
    echo '        -- \'
    echo "        ${a_posix_args}"
); }

fn_args_build_systemd() { (
    # skip interpreter string, if not used
    if test -z "${1}"; then
        shift
    fi

    b_execstart=''
    for a_arg in "${@}"; do
        # escape backslashes and double quotes, then wrap in double quotes
        b_escaped="$(printf '%s' "${a_arg}" | sed 's/\\/\\\\/g; s/"/\\"/g')"
        # delimit with leading space
        b_execstart="${b_execstart} \"${b_escaped}\""
    done

    # return with first leading space removed
    printf '%s' "${b_execstart# }"
); }

fn_args_build_posix() { (
    # skip interpreter string, if not used
    if test -z "${1}"; then
        shift
    fi

    b_args=''
    for a_arg in "${@}"; do
        # escape literal quotes as '\''
        b_escaped="$(printf '%s' "${a_arg}" | sed "s/'/'\\\\''/g")"
        # space delimit the literal-quoted escaped strings
        b_args="${b_args} '${b_escaped}'"
    done

    # return with first leading space removed
    printf '%s' "${b_args# }"
); }

fn_args_build_plist() { (
    # skip interpreter string, if not used
    if test -z "${1}"; then
        shift
    fi

    b_first='y'
    for a_arg in "$@"; do
        if test -z "${b_first}"; then
            printf '\\n'
        fi
        b_first=''
        printf '\t\t<string>%s</string>' "${a_arg}"
    done
); }

fn_launchctl_add() { (
    a_login_agent="${1}"
    a_plist_args="${2}"
    a_name="${3}"
    a_rdns="${4}"
    a_title="${5}"
    a_desc="${6}"
    a_url="${7}"
    a_user="${8}"
    a_group="${9}"
    a_workdir="${10}"
    a_path="${11}"
    a_cap_net_bind="${12}"
    a_dryrun="${13}"

    b_sudo=" ${cmd_sudo}"
    b_tmpl_ext="daemon.plist"
    b_launcher_path="/Library/LaunchDaemons"
    b_log_prefix=''
    if test -n "${a_login_agent}"; then
        b_sudo=''
        b_tmpl_ext="agent.plist"
        b_launcher_path="${HOME}/Library/LaunchAgents"
        b_log_prefix="${HOME}/.local/share/${a_name}"
        mkdir -p "${b_launcher_path}"
    fi

    if test "${a_cap_net_bind}" = 'n'; then
        echo 'warn: --no-cap-net-bind has no effect on macOS'
    fi

    # shellcheck disable=SC2002
    cat "${g_scriptdir}/../share/serviceman/template.${b_tmpl_ext}" |
        sed "s;EX_HOME;${HOME};g" |
        sed "s;EX_NAME;${a_name};g" |
        sed "s;EX_RDNS;${a_rdns};g" |
        sed "s;EX_TITLE;${a_title};g" |
        sed "s;EX_DESC;${a_desc};g" |
        sed "s;EX_URL;${a_url};g" |
        sed "s;.*EX_PLIST_ARG0.*;${a_plist_args};g" |
        sed "s;EX_USER;${a_user};g" |
        sed "s;EX_GROUP;${a_group};g" |
        sed "s;EX_WORKDIR;${a_workdir};g" |
        sed "s;EX_PATH;${a_path};g" > "${a_name}.plist"

    if test -n "${a_dryrun}"; then
        cat "${a_name}.plist"
        return 0
    fi

    {
        echo "Initializing launchctl service..."
        echo "    create ${b_launcher_path}/${a_name}.plist"
    } >&2
    ${b_sudo} mv "${a_name}.plist" "${b_launcher_path}/${a_name}.plist"
    ${b_sudo} chmod 0644 "${b_launcher_path}/${a_name}.plist"
    ${b_sudo} chown -R "${a_user}:${a_group}" "${b_launcher_path}/${a_name}.plist"

    echo "    create ~/.local/share/${a_name}/var/log/" >&2
    ${b_sudo} mkdir -p "${b_log_prefix}/var/log/"
    ${b_sudo} chmod 0750 "${b_log_prefix}/var/log/"
    ${b_sudo} touch "${b_log_prefix}/var/log/${a_name}.log"
    ${b_sudo} chmod 0640 "${b_log_prefix}/var/log/${a_name}.log"
    ${b_sudo} chown -R "${a_user}":"${a_group}" "${b_log_prefix}/var/log/${a_name}.log"

    echo "   ${b_sudo} launchctl unload -w '${b_launcher_path}/${a_name}.plist'" >&2
    ${b_sudo} launchctl unload -w "${b_launcher_path}/${a_name}.plist" 2> /dev/null || true
    sleep 0.5
    echo "   ${b_sudo} launchctl load -w '${b_launcher_path}/${a_name}.plist'" >&2
    ${b_sudo} launchctl load -w "${b_launcher_path}/${a_name}.plist"
    sleep 0.5
    #${b_sudo} launchctl bootstrap system "${b_launcher_path}/${a_name}.plist"
    echo "done" >&2

    fn_launchctl_help "${a_name}" "${a_login_agent}" >&2
); }

fn_launchctl_help() { (
    a_name="${1}"
    a_login_agent="${2}"

    b_sudo=" ${cmd_sudo}"
    b_launcher_path="/Library/LaunchDaemons"
    b_log_prefix=''
    if test -n "${a_login_agent}"; then
        b_sudo=''
        b_launcher_path='~''/Library/LaunchAgents'
        b_log_prefix='~'"/.local/share/${a_name}"
    fi

    echo ""
    echo "How To Manage"
    echo "   ${b_sudo} launchctl unload -w ${b_launcher_path}/${a_name}.plist"
    echo "   ${b_sudo} launchctl load -w ${b_launcher_path}/${a_name}.plist"
    echo "   ${b_sudo} launchctl unload ${b_launcher_path}/${a_name}.plist"
    echo "   ${b_sudo} launchctl load ${b_launcher_path}/${a_name}.plist"
    echo ""
    echo "Service File Locations"
    echo "    /Library/LaunchDaemons/"
    echo "    ~/Library/LaunchAgents/"
    echo ""
    echo "How To View Logs"
    echo "    tail -f ${b_log_prefix}/var/log/${a_name}.log"
    echo ""
); }

fn_systemd_logind_set_ipc() { (
    a_boot_daemon="${1}"
    a_user="${2}"
    a_ignore_logind_ipc="${3}"

    b_non_login_user="$(grep -E "^${a_user}:.*(/bin/false|/sbin/nologin)\$" /etc/passwd || true)"

    if test -n "${a_ignore_logind_ipc}"; then
        if test -z "${a_boot_daemon}"; then
            echo >&2 "warn: '--ignore-logind-ipc' has no meaning with '--agent'"
            return 0
        fi

        if test -n "${b_non_login_user}"; then
            echo >&2 "warn: '--ignore-logind-ipc' has no meaning for '${a_user}' (a non-login user)"
            return 0
        fi

        if test -z "${SERVICEMAN_IGNORE_LOGIND_IPC:-}"; then
            # ignoring return values to keep nix-compatible
            mkdir -p ~/.config/serviceman/ || true
            if ! test -e ~/.config/serviceman/config.env; then
                touch ~/.config/serviceman/config.env || true
            fi
            if ! grep -q -F 'SERVICEMAN_IGNORE_LOGIND_IPC=' ~/.config/serviceman/config.env; then
                {
                    echo "# uncomment to make --ignore-logind-ipc the default"
                    echo '#export SERVICEMAN_IGNORE_LOGIND_IPC=yes'
                } >> ~/.config/serviceman/config.env || true
            fi
        fi
    fi

    if test -n "${a_ignore_logind_ipc}" || test -n "${SERVICEMAN_IGNORE_LOGIND_IPC:-}"; then
        return 0
    fi

    if ! test -e /etc/systemd/logind.conf; then
        echo >&2 "warn: missing /etc/systemd/logind.conf"
        return 0
    fi

    if grep -q -E '^RemoveIPC=no' /etc/systemd/logind.conf; then
        echo >&2 "Checking /etc/systemd/logind.conf: RemoveIPC=no"
        return 0
    fi

    echo >&2 "Setting /etc/systemd/logind.conf: RemoveIPC=no"
    ${cmd_sudo} sed -i 's/#\?RemoveIPC=.*/RemoveIPC=no # set by serviceman for daemons running as login users/' /etc/systemd/logind.conf
    echo "    ${cmd_sudo} systemctl restart systemd-logind.service"
    ${cmd_sudo} systemctl restart systemd-logind.service
); }

fn_systemd_add() { (
    a_login_agent="${1}"
    a_systemd_args="${2}"
    a_name="${3}"
    a_title="${4}"
    a_desc="${5}"
    a_url="${6}"
    a_user="${7}"
    a_group="${8}"
    a_workdir="${9}"
    a_path="${10}"
    a_cap_net_bind="${11}"
    a_dryrun="${12}"

    b_sudo=" ${cmd_sudo}"
    b_usertype=''
    b_tmpl_ext="system.service"
    b_service_path="/etc/systemd/system"
    if test -n "${a_login_agent}"; then
        b_sudo=''
        b_usertype=" --user"
        b_tmpl_ext="user.service"
        b_service_path="${HOME}/.config/systemd/user"
        mkdir -p "${b_service_path}"
    fi

    # shellcheck disable=SC2002
    cat "${g_scriptdir}/../share/serviceman/template.${b_tmpl_ext}" |
        sed "s;EX_NAME;${a_name};g" |
        sed "s;EX_TITLE;${a_title};g" |
        sed "s;EX_DESC;${a_desc};g" |
        sed "s;EX_URL;${a_url};g" |
        sed "s;EX_EXECSTART_ARGS;${a_systemd_args};g" |
        sed "s;EX_USER;${a_user};g" |
        sed "s;EX_GROUP;${a_group};g" |
        sed "s;EX_WORKDIR;${a_workdir};g" |
        sed "s;EX_PATH;${a_path};g" > "${a_name}.service"

    if test "${a_cap_net_bind}" = 'n'; then
        mv "${a_name}.service" "${a_name}.service.new"

        # shellcheck disable=SC2002
        cat "${a_name}.service.new" |
            sed "s/^CapabilityBoundingSet/;CapabilityBoundingSet/g" |
            sed "s/^AmbientCapabilities/;AmbientCapabilities/g" |
            sed "s/^NoNewPrivileges/;NoNewPrivileges/g" > "${a_name}.service"

        rm "${a_name}.service.new"
    fi

    if test -n "${a_dryrun}"; then
        cat "${a_name}.service"
        return 0
    fi

    {
        echo "Initializing systemd service..."
        echo "    create ${b_service_path}/${a_name}.service"
    } >&2
    ${b_sudo} mv "${a_name}.service" "${b_service_path}/${a_name}.service"
    ${b_sudo} chmod 0644 "${b_service_path}/${a_name}.service"
    if test -z "${a_login_agent}"; then
        ${cmd_sudo} chown -R root:root "${b_service_path}/${a_name}.service"

        echo "    ${cmd_sudo} systemctl${b_usertype} restart systemd-journald" >&2
        #shellcheck disable=SC2086
        ${cmd_sudo} systemctl${b_usertype} restart systemd-journald
    fi

    echo "   ${b_sudo} systemctl${b_usertype} daemon-reload" >&2
    #shellcheck disable=SC2086
    ${b_sudo} systemctl${b_usertype} daemon-reload

    echo "   ${b_sudo} systemctl${b_usertype} enable '${a_name}'" >&2
    #shellcheck disable=SC2086
    ${b_sudo} systemctl${b_usertype} enable "${a_name}"

    echo "   ${b_sudo} systemctl${b_usertype} restart '${a_name}'" >&2
    #shellcheck disable=SC2086
    ${b_sudo} systemctl${b_usertype} restart "${a_name}"

    sleep 0.5

    echo "   ${b_sudo} systemctl${b_usertype} status -l --no-pager '${a_name}'" >&2
    echo "" >&2
    #shellcheck disable=SC2086
    ${b_sudo} systemctl${b_usertype} status -l --no-pager "${a_name}"

    fn_systemd_help "${a_name}" "${a_login_agent}" >&2
); }

fn_systemd_help() { (
    a_name="${1}"
    a_login_agent="${2}"

    b_sudo=" ${cmd_sudo}"
    b_usertype=''
    if test "${a_login_agent}" = 'y'; then
        b_sudo=''
        b_usertype=" --user"
    elif test "${a_login_agent}" = 'm'; then
        b_sudo=' [sudo]'
        b_usertype=" [--user]"
    fi

    echo ""
    echo "How To Manage"
    echo "   ${b_sudo} systemctl${b_usertype} daemon-reload"
    echo "   ${b_sudo} systemctl${b_usertype} start '${a_name}'"
    echo "   ${b_sudo} systemctl${b_usertype} enable '${a_name}'"
    echo "   ${b_sudo} systemctl${b_usertype} stop '${a_name}'"
    echo "   ${b_sudo} systemctl${b_usertype} disable '${a_name}'"
    echo "   ${b_sudo} systemctl${b_usertype} restart '${a_name}'"
    echo ""
    echo "Service File Locations"
    echo "    /etc/systemd/system/"
    echo "    ~/.config/systemd/user/"
    echo ""
    echo "How To View Logs"
    echo "    ${cmd_sudo} systemctl restart systemd-journald"
    echo "   ${b_sudo} journalctl${b_usertype} -xef --unit '${a_name}'"
    echo "   ${b_sudo} systemctl${b_usertype} status -l --no-pager '${a_name}'" >&2
    echo ""
); }

fn_openrc_add() { (
    a_login_agent="${1}"
    a_posix_args="${2}"
    a_name="${3}"
    a_title="${4}"
    a_desc="${5}"
    a_url="${6}"
    a_user="${7}"
    a_group="${8}"
    a_workdir="${9}"
    a_path="${10}"
    a_cap_net_bind="${11}"
    a_dryrun="${12}"

    if test -n "${a_login_agent}"; then
        echo >&2 "error: '--agent' has no meaning for OpenRC - it doesn't support user launchers"
        return 1
    fi

    b_supervise_args='--capabilities=CAP_NET_BIND_SERVICE'
    if test "${a_cap_net_bind}" = 'n'; then
        b_supervise_args=''
    fi

    # shellcheck disable=SC2002
    cat "${g_scriptdir}/../share/serviceman/template.openrc" |
        sed "s;EX_NAME;${a_name};g" |
        sed "s;EX_TITLE;${a_title};g" |
        sed "s;EX_DESC;${a_desc};g" |
        sed "s;EX_URL;${a_url};g" |
        sed "s;EX_POSIX_ARGS;${a_posix_args};g" |
        sed "s;EX_USER;${a_user};g" |
        sed "s;EX_GROUP;${a_group};g" |
        sed "s;EX_WORKDIR;${a_workdir};g" |
        sed "s;EX_PATH;${a_path};g" |
        sed "s;EX_SUPERVISE_ARGS;${b_supervise_args};g" > "${a_name}"

    if test -n "${a_dryrun}"; then
        cat "${a_name}"
        return 0
    fi

    echo "Initializing OpenRC service..." >&2
    echo "    create /etc/init.d/${a_name}" >&2
    ${cmd_sudo} mv "${a_name}" "/etc/init.d/${a_name}"
    ${cmd_sudo} chmod 0755 "/etc/init.d/${a_name}"
    ${cmd_sudo} chown -R root:root "/etc/init.d/${a_name}"

    echo "    create /etc/logrotate.d/${a_name}" >&2
    # shellcheck disable=SC2002
    cat "${g_scriptdir}/../share/serviceman/template.logrotate" |
        sed "s;EX_NAME;${a_name};g" |
        ${cmd_sudo} tee "/etc/logrotate.d/${a_name}" > /dev/null
    ${cmd_sudo} chmod 0640 "/etc/logrotate.d/${a_name}"
    ${cmd_sudo} chown -R root:root "/etc/logrotate.d/${a_name}"

    echo "    create /var/log/${a_name}" >&2
    ${cmd_sudo} touch "/var/log/${a_name}"
    ${cmd_sudo} chmod 0640 "/var/log/${a_name}"
    ${cmd_sudo} chown -R "${a_user}":"${a_group}" "/var/log/${a_name}"

    echo "    rc-service '${a_name}' restart" >&2
    ${cmd_sudo} rc-service "${a_name}" restart &&
        echo "    rc-update add '${a_name}'" >&2 &&
        ${cmd_sudo} rc-update add "${a_name}"

    sleep 0.5
    echo "done" >&2

    fn_openrc_help "${a_name}" >&2
); }

fn_openrc_help() { (
    a_name="${1}"

    echo ""
    echo "How To Manage"
    echo "    rc-update add ${a_name}"
    echo "    rc-service ${a_name} start"
    echo "    rc-service ${a_name} stop"
    echo "    rc-update delete ${a_name}"
    echo "    rc-service ${a_name} restart"
    echo ""
    echo "Service File Locations"
    echo "    /etc/init.d/"
    echo ""
    echo "How To View Logs"
    echo "    tail -f /var/log/${a_name}"
    echo ""
); }

fn_read_shebang() { (
    b_file="${1}"
    b_shebang="$(head -c 2 "${b_file}")"

    if test "#!" != "${b_shebang}"; then
        return
    fi

    b_program="$(head -n 1 "${b_file}" | tr '/' ' ' | rev | cut -d' ' -f1 | rev)"
    echo "${b_program}"
); }

cmd_list() { (
    b_all=''

    b_boot_daemon=''
    b_login_agent=''
    if test "$(uname -s)" = 'Darwin'; then
        b_login_agent='y'
    else
        b_boot_daemon='y'
    fi

    while test "${#}" -ge 1; do
        b_arg="${1:-}"
        shift

        case "${b_arg}" in
            help | --help)
                fn_list_help
                return 0
                ;;
            --all)
                b_all='y'
                continue
                ;;
            --agent)
                b_boot_daemon=''
                b_login_agent='y'
                continue
                ;;
            --daemon)
                b_boot_daemon='y'
                b_login_agent=''
                continue
                ;;
            *)
                # the first, potentially empty argument
                if test "${#}" -le 0; then
                    if test -z "${b_arg}"; then
                        continue
                    fi
                fi

                {
                    echo "error: unrecognized option '${b_arg}'"
                    fn_list_help
                } >&2
                return 1
                ;;
        esac
    done

    b_path=''
    b_header=''
    if command -v systemctl > /dev/null; then
        b_header='[Unit]'
        b_path="/etc/systemd/system"
        if test -n "${b_login_agent}"; then
            b_path="${HOME}/.config/systemd/user"
            mkdir -p "${b_path}"
        fi
    fi
    if command -v launchctl > /dev/null; then
        b_header='</plist>'
        b_path="/Library/LaunchDaemons"
        if test -n "${b_login_agent}"; then
            b_path="${HOME}/Library/LaunchAgents"
            mkdir -p "${b_path}"
        fi
    fi
    if command -v rc-update > /dev/null; then
        b_header='!/sbin/openrc-run'
        b_path="/etc/systemd/system"
        if test -n "${b_login_agent}"; then
            b_path=''
            echo >&2 "error: '--agent' has no meaning for OpenRC - it doesn't support user launchers"
            return 1
        fi
    fi
    if test -z "${b_path}"; then
        echo >&2 'error: could not detect systemd, openrc, or launchctl'
        return 1
    fi

    if test -z "${b_all}"; then
        {
            echo ""
            echo "${b_path}: (Generated for serviceman)"
            echo ""
            b_list="$(grep -i 'Generated for serviceman' "${b_path}"/* 2> /dev/null | cut -d':' -f1 | rev | cut -d'/' -f1 | rev)"
            if test -z "${b_list}"; then
                echo "    (none)"
            else
                echo "${b_list}" | sed 's/^/    /g'
            fi
            echo ""
        } >&2
        return
    fi

    {
        echo ""
        echo "${b_path}:"
        echo ""
        for b_file in "${b_path}"/*; do
            if ! test -e "${b_file}"; then
                echo "    (none)"
            fi

            if ! grep -q -F "${b_header}" "${b_file}" 2> /dev/null; then
                continue
            fi
            if grep -q -i 'Generated for serviceman' "${b_file}" 2> /dev/null; then
                echo "    $(basename "${b_file}")*"
            else
                echo "    $(basename "${b_file}")"
            fi
        done
        echo ""
        echo "* Generated for serviceman"
        echo ""
    } >&2
); }

cmd_start() { (
    b_state='start'

    b_boot_daemon=''
    b_login_agent=''
    if test "$(uname -s)" = 'Darwin'; then
        b_login_agent='y'
    else
        b_boot_daemon='y'
    fi

    b_name=''
    while test "${#}" -ge 1; do
        b_arg="${1:-}"
        shift
        if test -z "${b_arg}"; then
            continue
        fi

        case "${b_arg}" in
            help | --help)
                fn_state_help "${b_state}"
                return 0
                ;;
            --agent)
                b_boot_daemon=''
                b_login_agent='y'
                continue
                ;;
            --daemon)
                b_boot_daemon='y'
                b_login_agent=''
                continue
                ;;
            --* | -*)
                {
                    echo "error: unrecognized option '${b_arg}'"
                    fn_state_help "${b_state}"
                } >&2
                return 1
                ;;
            *)
                # the first, potentially empty argument
                if test "${#}" -le 0; then
                    if test -z "${b_arg}"; then
                        continue
                    fi
                fi
                if test -z "${b_name}"; then
                    b_name="${b_arg}"
                    continue
                fi

                {
                    echo "error: unrecognized argument '${b_arg}'"
                    fn_state_help "${b_state}"
                } >&2
                return 1
                ;;
        esac
    done
    if test -z "${b_name}"; then
        echo >&2 'error: missing command name'
        return 1
    fi

    if command -v systemctl > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} systemctl start --system "${b_name}"
            ${cmd_sudo} systemctl start --system "${b_name}"
        else
            echo systemctl start --user "${b_name}"
            systemctl start --user "${b_name}"
        fi
        return 0
    fi

    if command -v launchctl > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} launchctl load /Library/LaunchDaemons/"${b_name}".plist
            ${cmd_sudo} launchctl load /Library/LaunchDaemons/"${b_name}".plist
        else
            echo launchctl load ~/Library/LaunchAgents/"${b_name}".plist
            launchctl load ~/Library/LaunchAgents/"${b_name}".plist
        fi
        return 0
    fi

    if command -v rc-update > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} rc-service "${b_name}" start
            ${cmd_sudo} rc-service "${b_name}" start
        else
            echo >&2 "error: '--agent' is not supported for openrc"
            return 1
        fi
        return 0
    fi

    echo >&2 'error: could not detect systemd, openrc, or launchctl'
    return 1
); }

cmd_stop() { (
    b_state='stop'

    b_boot_daemon=''
    b_login_agent=''
    if test "$(uname -s)" = 'Darwin'; then
        b_login_agent='y'
    else
        b_boot_daemon='y'
    fi

    b_name=''
    while test "${#}" -ge 1; do
        b_arg="${1:-}"
        shift
        if test -z "${b_arg}"; then
            continue
        fi

        case "${b_arg}" in
            help | --help)
                fn_state_help "${b_state}"
                return 0
                ;;
            --agent)
                b_boot_daemon=''
                b_login_agent='y'
                continue
                ;;
            --daemon)
                b_boot_daemon='y'
                b_login_agent=''
                continue
                ;;
            --* | -*)
                {
                    echo "error: unrecognized option '${b_arg}'"
                    fn_state_help "${b_state}"
                } >&2
                return 1
                ;;
            *)
                # the first, potentially empty argument
                if test "${#}" -le 0; then
                    if test -z "${b_arg}"; then
                        continue
                    fi
                fi
                if test -z "${b_name}"; then
                    b_name="${b_arg}"
                    continue
                fi

                {
                    echo "error: unrecognized argument '${b_arg}'"
                    fn_state_help "${b_state}"
                } >&2
                return 1
                ;;
        esac
    done
    if test -z "${b_name}"; then
        echo >&2 "error: missing command name"
        return 1
    fi

    if command -v systemctl > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} systemctl stop "${b_name}"
            ${cmd_sudo} systemctl stop "${b_name}"
        else
            echo systemctl --user stop "${b_name}"
            systemctl --user stop "${b_name}"
        fi
        return 0
    fi

    if command -v launchctl > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} launchctl unload /Library/LaunchDaemons/"${b_name}".plist
            ${cmd_sudo} launchctl unload /Library/LaunchDaemons/"${b_name}".plist
        else
            echo launchctl unload ~/Library/LaunchAgents/"${b_name}".plist
            launchctl unload ~/Library/LaunchAgents/"${b_name}".plist
        fi
        return 0
    fi

    if command -v rc-update > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} rc-service "${b_name}" stop
            ${cmd_sudo} rc-service "${b_name}" stop
        else
            echo >&2 "error: '--agent' is not supported for openrc"
            return 1
        fi
        return 0
    fi

    echo >&2 'error: could not detect systemd, openrc, or launchctl'
    return 1
); }

cmd_restart() { (
    b_state='restart'

    b_boot_daemon=''
    b_login_agent=''
    if test "$(uname -s)" = 'Darwin'; then
        b_login_agent='y'
    else
        b_boot_daemon='y'
    fi

    b_name=''
    while test "${#}" -ge 1; do
        b_arg="${1:-}"
        shift
        if test -z "${b_arg}"; then
            continue
        fi

        case "${b_arg}" in
            help | --help)
                fn_state_help "${b_state}"
                return 0
                ;;
            --agent)
                b_boot_daemon=''
                b_login_agent='y'
                continue
                ;;
            --daemon)
                b_boot_daemon='y'
                b_login_agent=''
                continue
                ;;
            --* | -*)
                {
                    echo "error: unrecognized option '${b_arg}'"
                    fn_state_help "${b_state}"
                } >&2
                return 1
                ;;
            *)
                # the first, potentially empty argument
                if test "${#}" -le 0; then
                    if test -z "${b_arg}"; then
                        continue
                    fi
                fi
                if test -z "${b_name}"; then
                    b_name="${b_arg}"
                    continue
                fi

                {
                    echo "error: unrecognized argument '${b_arg}'"
                    fn_state_help "${b_state}"
                } >&2
                return 1
                ;;
        esac
    done
    if test -z "${b_name}"; then
        echo >&2 "error: missing command name"
        return 1
    fi

    if command -v systemctl > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} systemctl restart --system "${b_name}"
            ${cmd_sudo} systemctl restart --system "${b_name}"
        else
            echo systemctl restart --user "${b_name}"
            systemctl restart --user "${b_name}"
        fi
        return 0
    fi

    if command -v launchctl > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} launchctl unload /Library/LaunchDaemons/"${b_name}".plist
            ${cmd_sudo} launchctl unload /Library/LaunchDaemons/"${b_name}".plist
            echo ${cmd_sudo} launchctl load /Library/LaunchDaemons/"${b_name}".plist
            ${cmd_sudo} launchctl load /Library/LaunchDaemons/"${b_name}".plist
        else
            echo launchctl unload ~/Library/LaunchAgents/"${b_name}".plist
            launchctl unload ~/Library/LaunchAgents/"${b_name}".plist
            echo launchctl load ~/Library/LaunchAgents/"${b_name}".plist
            launchctl load ~/Library/LaunchAgents/"${b_name}".plist
        fi
        return 0
    fi

    if command -v rc-update > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} rc-service "${b_name}" restart
            ${cmd_sudo} rc-service "${b_name}" restart
        else
            echo >&2 "error: '--agent' is not supported for openrc"
            return 1
        fi
        return 0
    fi

    echo >&2 'error: could not detect systemd, openrc, or launchctl'
    return 1
); }

cmd_enable() { (
    b_state='enable'

    b_boot_daemon=''
    b_login_agent=''
    if test "$(uname -s)" = 'Darwin'; then
        b_login_agent='y'
    else
        b_boot_daemon='y'
    fi

    b_name=''
    while test "${#}" -ge 1; do
        b_arg="${1:-}"
        shift
        if test -z "${b_arg}"; then
            continue
        fi

        case "${b_arg}" in
            help | --help)
                fn_state_help "${b_state}"
                return 0
                ;;
            --agent)
                b_boot_daemon=''
                b_login_agent='y'
                continue
                ;;
            --daemon)
                b_boot_daemon='y'
                b_login_agent=''
                continue
                ;;
            --* | -*)
                {
                    echo "error: unrecognized option '${b_arg}'"
                    fn_state_help "${b_state}"
                } >&2
                return 1
                ;;
            *)
                # the first, potentially empty argument
                if test "${#}" -le 0; then
                    if test -z "${b_arg}"; then
                        continue
                    fi
                fi
                if test -z "${b_name}"; then
                    b_name="${b_arg}"
                    continue
                fi

                {
                    echo "error: unrecognized argument '${b_arg}'"
                    fn_state_help "${b_state}"
                } >&2
                return 1
                ;;
        esac
    done
    if test -z "${b_name}"; then
        echo >&2 "error: missing command name"
        return 1
    fi

    if command -v systemctl > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} systemctl enable --system "${b_name}"
            ${cmd_sudo} systemctl enable --system "${b_name}"
            echo ${cmd_sudo} systemctl start --system "${b_name}"
            ${cmd_sudo} systemctl start --system "${b_name}"
        else
            echo systemctl enable --user "${b_name}"
            systemctl enable --user "${b_name}"
            echo systemctl start --user "${b_name}"
            systemctl start --user "${b_name}"
        fi
        return 0
    fi

    if command -v launchctl > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} launchctl load -w /Library/LaunchDaemons/"${b_name}".plist
            ${cmd_sudo} launchctl load -w /Library/LaunchDaemons/"${b_name}".plist
        else
            echo launchctl load -w ~/Library/LaunchAgents/"${b_name}".plist
            launchctl load -w ~/Library/LaunchAgents/"${b_name}".plist
        fi
        return 0
    fi

    if command -v rc-update > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} rc-update add "${b_name}"
            ${cmd_sudo} rc-update add "${b_name}"
            echo ${cmd_sudo} rc-service "${b_name}" start
            ${cmd_sudo} rc-service "${b_name}" start
        else
            echo >&2 "error: '--agent' is not supported for openrc"
            return 1
        fi
        return 0
    fi

    echo >&2 'error: could not detect systemd, openrc, or launchctl'
    return 1
); }

cmd_disable() { (
    b_state='disable'

    b_boot_daemon=''
    b_login_agent=''
    if test "$(uname -s)" = 'Darwin'; then
        b_login_agent='y'
    else
        b_boot_daemon='y'
    fi

    b_name=''
    while test "${#}" -ge 1; do
        b_arg="${1:-}"
        shift
        if test -z "${b_arg}"; then
            continue
        fi

        case "${b_arg}" in
            help | --help)
                fn_state_help "${b_state}"
                return 0
                ;;
            --agent)
                b_boot_daemon=''
                b_login_agent='y'
                continue
                ;;
            --daemon)
                b_boot_daemon='y'
                b_login_agent=''
                continue
                ;;
            --* | -*)
                {
                    echo "error: unrecognized option '${b_arg}'"
                    fn_state_help "${b_state}"
                } >&2
                return 1
                ;;
            *)
                # the first, potentially empty argument
                if test "${#}" -le 0; then
                    if test -z "${b_arg}"; then
                        continue
                    fi
                fi
                if test -z "${b_name}"; then
                    b_name="${b_arg}"
                    continue
                fi

                {
                    echo "error: unrecognized argument '${b_arg}'"
                    fn_state_help "${b_state}"
                } >&2
                return 1
                ;;
        esac
    done
    if test -z "${b_name}"; then
        echo >&2 "error: missing command name"
        return 1
    fi

    if command -v systemctl > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} systemctl stop --system "${b_name}"
            ${cmd_sudo} systemctl stop --system "${b_name}"
            echo ${cmd_sudo} systemctl disable --system "${b_name}"
            ${cmd_sudo} systemctl disable --system "${b_name}"
        else
            echo systemctl stop --user "${b_name}"
            systemctl stop --user "${b_name}"
            echo systemctl disable --user "${b_name}"
            systemctl disable --user "${b_name}"
        fi
        return 0
    fi

    if command -v launchctl > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} launchctl unload -w /Library/LaunchDaemons/"${b_name}".plist
            ${cmd_sudo} launchctl unload -w /Library/LaunchDaemons/"${b_name}".plist
        else
            echo launchctl unload -w ~/Library/LaunchAgents/"${b_name}".plist
            launchctl unload -w ~/Library/LaunchAgents/"${b_name}".plist
        fi
        return 0
    fi

    if command -v rc-update > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} rc-service "${b_name}" stop
            ${cmd_sudo} rc-service "${b_name}" stop
            echo ${cmd_sudo} rc-update del "${b_name}"
            ${cmd_sudo} rc-update del "${b_name}"
        else
            echo >&2 "error: '--agent' is not supported for openrc"
            return 1
        fi
        return 0
    fi

    echo >&2 'error: could not detect systemd, openrc, or launchctl'
    return 1
); }

cmd_logs() { (
    b_state='logs'

    b_boot_daemon=''
    b_login_agent=''
    if test "$(uname -s)" = 'Darwin'; then
        b_login_agent='y'
    else
        b_boot_daemon='y'
    fi

    b_name=''
    while test "${#}" -ge 1; do
        b_arg="${1:-}"
        shift
        if test -z "${b_arg}"; then
            continue
        fi

        case "${b_arg}" in
            help | --help)
                fn_state_help "${b_state}"
                return 0
                ;;
            --agent)
                b_boot_daemon=''
                b_login_agent='y'
                continue
                ;;
            --daemon)
                b_boot_daemon='y'
                b_login_agent=''
                continue
                ;;
            --* | -*)
                {
                    echo "error: unrecognized option '${b_arg}'"
                    fn_state_help "${b_state}"
                } >&2
                return 1
                ;;
            *)
                # the first, potentially empty argument
                if test "${#}" -le 0; then
                    if test -z "${b_arg}"; then
                        continue
                    fi
                fi
                if test -z "${b_name}"; then
                    b_name="${b_arg}"
                    continue
                fi

                {
                    echo "error: unrecognized argument '${b_arg}'"
                    fn_state_help "${b_state}"
                } >&2
                return 1
                ;;
        esac
    done
    if test -z "${b_name}"; then
        echo >&2 "error: missing command name"
        return 1
    fi

    if command -v systemctl > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} journalctl -xef --unit "${b_name}"
            ${cmd_sudo} journalctl -xef --unit "${b_name}"
        else
            echo journalctl --user -xef --unit "${b_name}"
            journalctl --user -xef --unit "${b_name}"
        fi
        return 0
    fi

    if command -v launchctl > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} "tail -f /var/log/${b_name}.log"
            ${cmd_sudo} tail -f "/var/log/${b_name}.log"
        else
            echo "tail -f ~/.local/share/${b_name}/var/log/${b_name}.log"
            tail -f ~/.local/share/"${b_name}/var/log/${b_name}.log"
        fi
        return 0
    fi

    if command -v rc-update > /dev/null; then
        if test -n "${b_boot_daemon}"; then
            echo ${cmd_sudo} "tail -f /var/log/${b_name}.log"
            ${cmd_sudo} tail -f "/var/log/${b_name}.log"
        else
            echo >&2 "error: '--agent' is not supported for openrc"
            return 1
        fi
        return 0
    fi

    echo >&2 'error: could not detect systemd, openrc, or launchctl'
    return 1
); }

main() { (
    b_cmd="${1:-}"
    if test "${#}" -ge 1; then
        shift
    fi

    case "${b_cmd}" in
        add) cmd_add "${@:-}" ;;
        list) cmd_list "${@:-}" ;;
        start) cmd_start "${@:-}" ;;
        stop) cmd_stop "${@:-}" ;;
        restart) cmd_restart "${@:-}" ;;
        enable) cmd_enable "${@:-}" ;;
        disable) cmd_disable "${@:-}" ;;
        logs) cmd_logs "${@:-}" ;;
        __noop__) ;; # to be able to source without running
        help | --help) fn_help ;;
        version | --version | -V) fn_version ;;
        *)
            {
                echo "error: unrecognized option '${b_cmd}'"
                echo ""
                fn_help
            } >&2
            exit 1
            ;;
    esac
) }

main "${@:-}"
